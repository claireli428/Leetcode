/**
 * @param {number[][]} nums
 * @return {number[]}
 */
const top = 0;
const parent = i => ((i + 1) >>> 1) - 1;
const left = i => (i << 1) + 1;
const right = i => (i + 1) << 1;

class PriorityQueue {
  constructor(comparator = (a, b) => a > b) {
    this._heap = [];
    this._comparator = comparator;
  }
  size() {
    return this._heap.length;
  }
  isEmpty() {
    return this.size() == 0;
  }
  head() {
    return this._heap[top];
  }
  offer(...values) {
    values.forEach(value => {
      this._heap.push(value);
      this._siftUp();
    });
    return this.size();
  }
  poll() {
    const poppedValue = this.head();
    const bottom = this.size() - 1;
    if (bottom > top) {
      this._swap(top, bottom);
    }
    this._heap.pop();
    this._siftDown();
    return poppedValue;
  }
  replace(value) {
    const replacedValue = this.head();
    this._heap[top] = value;
    this._siftDown();
    return replacedValue;
  }
  _greater(i, j) {
    return this._comparator(this._heap[i], this._heap[j]);
  }
  _swap(i, j) {
    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];
  }
  _siftUp() {
    let node = this.size() - 1;
    while (node > top && this._greater(node, parent(node))) {
      this._swap(node, parent(node));
      node = parent(node);
    }
  }
  _siftDown() {
    let node = top;
    while (
      (left(node) < this.size() && this._greater(left(node), node)) ||
      (right(node) < this.size() && this._greater(right(node), node))
    ) {
      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);
      this._swap(node, maxChild);
      node = maxChild;
    }
  }
}

var smallestRange = function (nums) {
  let pq = new PriorityQueue((a, b) => { return nums[a.r][a.c] < nums[b.r][b.c] });
  let max = Number.MIN_SAFE_INTEGER;
  for (let i = 0; i < nums.length; i++) {
    pq.offer({ r: i, c: 0 });
    max = Math.max(max, nums[i][0]);
  }

  let range = Number.MAX_SAFE_INTEGER;
  let res = [null, null];
  while (pq.size() === nums.length) {
    let head = pq.poll();
    let min = nums[head.r][head.c];
    if (max - min < range) {
      range = max - min;
      res = [min, max];
    }

    if (head.c < nums[head.r].length - 1) {
      pq.offer({ r: head.r, c: head.c + 1 });
      max = Math.max(max, nums[head.r][head.c + 1]);
    }
  }

  return res;
};

